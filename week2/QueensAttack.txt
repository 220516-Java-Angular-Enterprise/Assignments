public static int queensAttack(int n, int k, int r_q, int c_q, List<List<Integer>> obstacles) {
    // Write your code here
        int out = 0;
        out += 2*(n-1); //vert and hor moves

        int d1 = Math.min(n-c_q, n-r_q);
        int d2 = Math.min(c_q-1, n-r_q);
        int d3 = Math.min(c_q-1, r_q-1); //diag moves
        int d4 = Math.min(n-c_q, r_q-1);

        out += d1+d2+d3+d4;

        int oU = 0;
        int oUL = 0;
        int oL = 0;
        int oDL =0;
        int oD = 0;
        int oDR = 0;
        int oR = 0;
        int oUR = 0;

        for(List<Integer> ob : obstacles) {
            int r_o = ob.get(0);
            int c_o = ob.get(1);
            int dr = r_o - r_q;
            int dc = c_o - c_q;

            if(r_o == r_q) { //same row
                if(c_o < c_q) { //obstacle left of queen
                    oL = Math.max(oL, c_o);
                }
                else { //right of queen
                    oR = Math.max(oR, Math.abs(n-c_o)+1);
                }
            }
            else if (c_o == c_q) { //same column
                if(r_o < r_q) {// obstacle below queen
                    oD = Math.max(oD, r_o);
                }
                else {//above queen
                    oU = Math.max(oU, Math.abs(n-r_o)+1);
                }
            }
            else if (Math.abs(dr) == Math.abs(dc)) {//same diagonal
                // Upper right
                if (dr > 0 && dc > 0) {
                    oUR = Math.max(oUR, Math.min(Math.abs(n-c_o)+1, Math.abs(n-r_o)+1));
                }
                //Upper left
                else if (dr > 0 && dc < 0) {
                    oUL = Math.max(oUL, Math.min(c_o, Math.abs(n-r_o)+1));
                }
                //Lower left
                else if(dr < 0 && dc < 0) {
                    oDL = Math.max(oDL, Math.min(c_o, r_o));
                }
                //lower right
                else if(dr < 0 && dc > 0) {
                    oDR = Math.max(oDR, Math.min(Math.abs(n-c_o)+1, r_o));
                }
            }
        }
        out -= oU+oUL+oL+oDL+oD+oDR+oR+oUR;

        return out;
    }